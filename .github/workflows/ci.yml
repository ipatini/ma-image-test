name: CI
on:
  push:
    branches:
      - main
      - r[1-9]
  pull_request:
    branches:
      - main
      - r[1-9]

jobs:
  build-ma-image:
    runs-on: ubuntu-latest
    
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    
    env:
      IMAGE_BASE_NAME: my-multi-arch-image
      IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/my-multi-arch-image:latest
      IMAGE_NAME_GITLAB: registry.gitlab.com/${{ secrets.GITLAB_NAMESPACE }}/my-multi-arch-image:latest
      
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitLab Docker Registry (using GitLab access token)
      - name: Log in to GitLab Docker Registry
        uses: docker/login-action@v2
        with:
          registry: registry.gitlab.com
          username: ${{ secrets.GITLAB_USERNAME }}
          password: ${{ secrets.GITLAB_TOKEN }}

      # Log in to GitHub Container Registry (using GitHub token)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build multi-architecture Docker image (for amd64 and arm64)
      #- name: Build and push multi-architecture image
      #  run: |
      #    # Define platforms you want to build for
      #    platforms="linux/amd64,linux/arm64,linux/arm/v7"
      #
      #    # Build the Docker image using Buildx
      #    docker buildx build --platform $platforms --file Dockerfile --tag ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME --push .
      #
      #    # Make the image public via GitHub API
      #    curl -X PATCH \
      #      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #      -H "Accept: application/vnd.github.v3+json" \
      #      -d '{"visibility": "public"}' \
      #      https://api.github.com/user/packages/container/ghcr.io%2F${{ github.repository_owner }}%2F$IMAGE_NAME/versions/latest
      #
      #    # Print image url
      #    echo ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

      # Remove previous versions
      #- uses: actions/delete-package-versions@v5
      #  with: 
      #    package-name: '${{ env.IMAGE_BASE_NAME }}'
      #    package-type: 'container'
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #
      #- name: Delete previous container package versions
      #  uses: actions/delete-package-versions@v5
      #  with:
      #    # Replace with the package name and version(s) you want to delete
      #    package-name: "${{ env.IMAGE_BASE_NAME }}"
      #    package-type: 'container'
      #    version: "1.0.0"
      #    # Optional: Set this to true if you want to force delete (use carefully)
      #    force: false
      #    # Optional: Set to true to delete the latest version of the package
      #    delete_latest: true
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build and push multi-architecture image using docker/build-push-action
      - name: Build and push multi-architecture image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_NAME_GITLAB }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      # Make the image public via GitHub API
      #- name: Set image visibility to public
      #  run: |
      #    curl -X PATCH \
      #      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #      -H "Accept: application/vnd.github.v3+json" \
      #      -d '{"visibility": "public"}' \
      #      https://api.github.com/user/packages/container/ghcr.io%2F${{ github.repository_owner }}%2F$IMAGE_NAME/versions/latest

      # Generate artifact attestation
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
